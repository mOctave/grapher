package ib.grapher;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.EtchedBorder;

/**
 * A class which loosely "holds" any number of Cells in a doubly linked list.
 * As well as calculating a statistical report of the series and holding
 * references to its first and last Cells, a Series also contains an iterator
 * to make it easier to loop through the whole series at once.
 */
public class Series extends JPanel implements Iterable<Cell> {
	/**
	 * A constructor that initializes this series, as well as adding a single
	 * empty cell to it. All series should always have at least one cell in them
	 * at all time.
	 */
	public Series(Cell c) {
		// Non-GUI initialization
		this.name = "Untitled Series";
		this.statistics = new HashMap<>();

		this.firstCell = c;
		this.lastCell = c;
		c.setSeries(this);
		c.setIndex(0);

		// GUI initialization
		setBackground(Main.SILVER);
		setBorder(new EtchedBorder(EtchedBorder.RAISED));

		BoxLayout layout = new BoxLayout(this, BoxLayout.Y_AXIS);
		setLayout(layout);

		// Set up the text field
		textField = new JTextField(8);
		textField.setVisible(true);
		textField.setBackground(Main.TRANSPARENT);
		textField.setMargin(new Insets(0,0,0,0));

		textField.addFocusListener(new FocusAdapter() {
			public void focusGained(FocusEvent e) {
				Series.this.setBackground(Main.YELLOW);
			}

			public void focusLost(FocusEvent e) {
				Series.this.setBackground(Main.SILVER);
			}
		});

		textField.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Series.this.setName(Series.this.textField.getText());
			}
		});
	
		add(textField);


		// Set up the stat panel view
		statView = new JLabel();
		statView.setPreferredSize(new Dimension(textField.getWidth(), 40));
		statView.setFont(new Font("small", Font.PLAIN, 10));
		statView.setText("<html><b>Series Stats:</b><br/>Values<br/>Sum<br/>Mean<br/>Min<br/>Q1<br/>Median<br/>Q3<br/>Max<br/>Range<br/>Standard Deviation</html>");
		statView.setVisible(true);
		statView.setBackground(Main.TRANSPARENT);
		statView.setBorder(new EtchedBorder(EtchedBorder.RAISED));
		statView.setVerticalAlignment(SwingConstants.TOP);
		add(statView);
	}


	/** The name of this series. */
	private String name;
	/** The first cell in this series. */
	private Cell firstCell;
	/** The last cell in this series. */
	private Cell lastCell;
	/** A text field which allows this series' name to be edited. */
	private JTextField textField;
	/** A collection of autogenerated statistics about this series. */
	private HashMap<String, Double> statistics;
	/** A text area which displays stastistics for the user to see. */
	private JLabel statView;

	/**
	 * Creates an iterator for this series.
	 * @return The created {@link java.util.Iterator}
	 */
	@Override
	public Iterator<Cell> iterator() {
		Iterator<Cell> iterator = new Iterator<Cell>() {
			private Cell c = null;

			@Override
			public boolean hasNext() {
				if (c == null) {
					return Series.this.firstCell != null;
				} else {
					return (c.getNext() != null);
				}
			}

			@Override
			public Cell next() {
				if (c == null) {
					c = Series.this.firstCell;
				} else {
					c = c.getNext();
				}
				return c;
			}
		};
		return iterator;
	}

	/**
	 * Searches this series for cells with a particular value, returning a
	 * {@link java.util.List} of any matches
	 * @param s The string to search for
	 * @return A list of cells whose values exactly match the search criteria
	 */
	public List<Cell> search(String s) {
		List<Cell> matches = new ArrayList<>();
		for (Cell c : this) {
			if (c.getValue().equals(s))
				matches.add(c);
			c = c.getNext();
		}
		return matches;
	}

	/**
	 * Calculates a statistical summary of this series, storing the value in
	 * {@link #statistics} for later retrieval.
	 */
	public void calculateStatistics() {

	}

	/**
	 * Updates the statistics panel view to match newly calculated statistics.
	 */
	public void updateStatView() {

	}

	// Getters and setters

	/**
	 * Gets the name of this series.
	 * @return the {@link java.lang.String} name of this series
	 */
	public String getName() {
		return name;
	}

	/**
	 * Changes the name of this series.
	 * @param s the new name of this series
	 */
	public void setName(String s) {
		name = s;
		textField.setText(s);
	}

	/**
	 * Gets the first (top) cell in this series.
	 * @return A reference to the first {@link Cell} object in this series
	 */
	public Cell getFirst() {
		return firstCell;
	}

	/**
	 * Changes which cell is the first one in this series
	 * @param c The new {@link Cell} object to place at the top of this series
	 */
	public void setFirst(Cell c) {
		firstCell = c;
	}

	/**
	 * Gets the last (bottom) cell in this series.
	 * @return A reference to the last {@link Cell} object in this series
	 */
	public Cell getLast() {
		return lastCell;
	}

	/**
	 * Changes which cell is the last one in this series
	 * @param c The new {@link Cell} object to place at the bottom of this series
	 */
	public void setLast(Cell c) {
		lastCell = c;
	}

	/**
	 * Gets a given statistic about this series.
	 * @param key The key to search {@link #statistics} for
	 */
	public double getStatistic(String key) {
		return statistics.get(key);
	}

	// Statistics are calculated by the series object itself, therefore they do
	// not have a setter method.
}
